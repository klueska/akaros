#! /usr/bin/env bash
#
# Copyright 2015 Google Inc. All Rights Reserved.
# Kevin Klues <klueska@google.com>

function usage()
{
	local cmd="${0}"
	echo "Usage:"
	echo "    ${cmd} -h | --help"
	echo "    ${cmd} --tools-instdir=<dir>"
	echo "    ${cmd//?/ } [ --custom-bashrc ]"
	echo "    ${cmd//?/ } [ --no-build-xcc ]"
	echo ""
	echo "Options:"
	echo "    -h --help              Display this screen and exit"
	echo "    --tools-instdir=<dir>  The path for installing akaros related tools"
	echo "                           A common location is [ ~/install ]"
	echo "    --custom-bashrc        Install settings to custom file instead of ~/.bashrc"
	echo "    --no-build-xcc         Skip building the cross compiler"
}

function parse_args()
{
	for i in $@; do
		case $i in
			-h|--help)
				usage
				exit 0
				;;
			--tools-instdir=*)
				akaros_tools_instdir="${i#*=}"
				;;
			--custom-bashrc=*)
				custom_bashrc="${i#*=}"
				;;
			--no-build-xcc)
				no_build_xcc="true"
				;;
			*)
				echo "Error: Unknown option"
				usage
				exit 1
				;;
		esac
	done
	if [ "${akaros_tools_instdir}" = "" ]; then
		echo "Error: You must supply a --tools-instdir parameter"
		usage
		exit 1
	fi
}

function check_cmd_deps()
{
	declare -A rets
	local cmds="git go gawk bison g++ make flex man kvm \
				qemu-system-x86_64 screen"
	local fail=false

	function check()
	{
		local cmd=${1}
		which ${cmd} > /dev/null 2>&1
		rets[${cmd}]=${?}
	}
	for c in ${cmds}; do
		check ${c}
	done

	for r in ${!rets[@]}; do
		if [ "${rets[${r}]}" != 0 ]; then
			echo "You must have '${r}' installed in order to proceed!"
			fail=true
		fi
	done

	if [ "${fail}" = "true" ]; then
		echo "To install all required packages on ubuntu you can run:"
		echo "sudo apt-get install -y \\"
		echo "    bison \\"
		echo "    build-essential \\"
		echo "    flex \\"
		echo "    gawk \\"
		echo "    git \\"
		echo "    man \\"
		echo "    ncurses-dev \\"
		echo "    qemu-kvm \\"
		echo "    qemu-system-x86 \\"
		echo "    screen"
	fi
	unset check
}

function check_goversion()
{
	local min_version="1.5.1"
	local version=$(go version)
	local regex="(go[0-9].[0-9].[0-9])"

	if [[ ${version} =~ ${regex} ]]; then
		local compare="${min_version}"
		version=${BASH_REMATCH[1]#go}
		while [[ "${version}" != "0" || "${compare}" != "0" ]]; do
			if [ "${version%%.*}" -lt "${compare%%.*}" ]; then
				echo "You must be using go >= ${min_version}"
			fi
			[[ "${version}" =~ "." ]] && version="${version#*.}" || version=0
			[[ "${compare}" =~ "." ]] && compare="${compare#*.}" || compare=0
		done
	fi
}

function check_gopath()
{
	which go > /dev/null 2>&1
	if [ "${?}" = "0" ]; then
		eval $(go env)
	fi
	if [ "${GOPATH}" == "" ]; then
		echo "Some of the tools that akaros depends on are written in Go."
		echo "Go relies on third party tools installed into an environment variable, called GOPATH."
		echo "You must have GOPATH set in order to proceed."
		echo "Please see https://github.com/golang/go/wiki/GOPATH for reference."
	fi
}

function check_awk()
{
	local awk=$(awk -W version 2>&1 | head -n 1 | awk '{print $$1}')
	if [ "$(echo ${awk} | grep GNU)" = "" ]; then
		echo "Your default 'awk' implementation must map to 'gawk'."
		echo "Please set this mapping in order to proceed."
	fi
}

function check_dependencies()
{
	local errs=()
	local fail=false
	local checks="check_cmd_deps check_goversion check_gopath check_awk"
	for c in ${checks}; do
		local err="$(eval ${c})"
		if [ "${err}" != "" ]; then
			errs+=("Error: ${c}"$'\n'"${err}")
		fi
	done

	for e in "${errs[@]}"; do
		if [ "${e}" != "" ]; then
			echo "${e}"
			if [ "${errs[-1]}" != "${e}" ]; then
				echo ""
			fi
			fail=true
		fi
	done

	if [ "${fail}" = "true" ]; then
		exit 1
	fi
}

function create_bash_akaros()
{
	echo "... Creating $(basename ${bash_akaros}) ..."
	echo '### This is an autogenerated file. Do not edit! ###"' > ${bash_akaros}
	echo '' >> ${bash_akaros}
}

function install_git_hooks()
{
	cd ${akaros_root}
	echo "... Copying scripts/git-hooks into .git/hooks ..."
	cp -R scripts/git-hooks/* .git/hooks
}

function install_commit_alias()
{
	cd ${akaros_root}
	echo "... Installing a git alias to ensure 'Signed-off-by' in commit messages ..."
	git config alias.commit 'commit -s'
}

function install_ak_scripts()
{
	echo "... Installing docopt-scripts for akaros ..."
	if [ ! -d "${ak_scripts_instdir}" ]; then
		git clone -q https://github.com/google/docopt-scripts ${ak_scripts_instdir}
	fi
	cd ${ak_scripts_instdir}
	make EXEC=ak install

	echo '# ak-scripts setup' >> ${bash_akaros}
	echo "export PATH=\"${ak_scripts_instdir}/bin:\${PATH}\"" >> ${bash_akaros}
	echo "PROG=ak source \"${ak_scripts_instdir}/bin/bash_autocomplete\"" >> ${bash_akaros}
	echo '' >> ${bash_akaros}

	local akconfig="${HOME}/.akconfig"
	if [ ! -f "${akconfig}" ]; then
		echo '#!/usr/local/env bash' > ${akconfig}
		echo '' >> ${akconfig}
		echo '# Akaros Settings' >> ${akconfig}
		echo ": \${AKAROS_ROOT:=\"${akaros_root}\"}" >> ${akconfig}
		echo ": \${AKAROS_9P_ROOT:=\"\${AKAROS_ROOT}/mnt\"}" >> ${akconfig}
		echo "AK_SCRIPTS_PATH=\"\${AK_SCRIPTS_PATH}:\${AKAROS_ROOT}/scripts/ak-scripts\"" >> ${akconfig}
		echo '' >> ${akconfig}
		echo '# Akaros Cross Compiler Settings' >> ${akconfig}
		echo ": \${X86_64_INSTDIR:=\"${x86_64_instdir}\"}" >> ${akconfig}
	fi
	source ${bash_akaros}
}

function prep_kernel()
{
	echo "... Prepping the kernel for building ..."
	cd ${akaros_root}
	cp Makelocal.template Makelocal
	make ARCH=x86 defconfig
}

function install_xcc()
{
	echo "... Installing the akaros cross compiler ..."
	echo "This operation may take a while"
	echo "To abort press 'Ctrl-C'"
	echo "To skip this step the next time around, run ${0} with --no-build-xcc"
	echo ""
	echo "Press any key to continue..."
	(tty_state="$(stty -g)"
	stty -icanon
	LC_ALL=C dd bs=1 count=1 > /dev/null 2>&1
	stty "$tty_state"
	) < /dev/tty

	cd ${akaros_root}
	ak rebuild-cross-compiler
	echo '# cross-compiler setup' >> ${bash_akaros}
	echo "export PATH=\"${x86_64_instdir}:\${PATH}\"" >> ${bash_akaros}
	echo '' >> ${bash_akaros}
}

function install_bash_akaros()
{
	echo "... Installing $(basename ${bash_akaros}) into $(basename ${bashrc}) ..."
	local srcline="source \"${bash_akaros}\""
	if [ "$(grep "${srcline}" ${bashrc})" = "" ]; then
		echo '' >> ${bashrc}
		echo '# Install akaros specific paths and tool macros' >> ${bashrc}
		echo "${srcline}" >> ${bashrc}
	fi
}

function main()
{
	# Parse the parameters
	local akaros_tools_instdir=
	local no_build_xcc=
	parse_args ${@}
	mkdir -p ${akaros_tools_instdir}

	# Vars derived from akaros_tools_instdir
	local ak_scripts_instdir=${akaros_tools_instdir}/ak-scripts
	local x86_64_instdir=${akaros_tools_instdir}/x86_64-ucb-akaros-gcc

	# Bash specific files for akaros
	local bash_akaros=${HOME}/.akaros.bash.inc
	local bashrc=${HOME}/.bashrc
	if [ "${custom_bashrc}" != "" ]; then
		bashrc="${custom_bashrc}"
	fi

	# Store off the current directory
	local akaros_root=${PWD}

	set -e
	check_dependencies
	create_bash_akaros
	install_ak_scripts
	prep_kernel
	if [ "${no_build_xcc}" != "true" ]; then
		install_xcc
	fi
	install_git_hooks
	install_commit_alias
	install_bash_akaros
	echo "Done."
}

# Execute main if not being sourced
if [ "${_}" == "${0}" ]; then
	main ${@}
fi
